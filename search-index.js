var searchIndex = JSON.parse('{\
"bit_vec":{"doc":"Collections implemented with bit vectors.","t":[8,3,3,3,3,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10],"n":["BitBlock","BitVec","Blocks","IntoIter","Iter","all","and","any","append","bits","blocks","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bytes","capacity","clear","clone","clone","clone","clone_from","clone_into","clone_into","clone_into","cmp","count_ones","default","difference","eq","eq_vec","extend","fmt","from","from","from","from","from_byte","from_bytes","from_elem","from_fn","from_iter","get","grow","hash","index","intersect","into","into","into","into","into_iter","into_iter","into_iter","into_iter","is_empty","iter","len","nand","negate","new","next","next","next","next_back","next_back","next_back","none","nor","one","or","partial_cmp","pop","push","reserve","reserve_exact","set","set_all","set_len","shrink_to_fit","size_hint","size_hint","split_off","storage","storage_mut","to_bytes","to_owned","to_owned","to_owned","truncate","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","union","with_capacity","xnor","xor","zero"],"q":["bit_vec","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Abstracts over a pile of bits (basically unsigned …","The bitvector type.","An iterator over the blocks of a <code>BitVec</code>.","","An iterator for <code>BitVec</code>.","Returns <code>true</code> if all bits are 1.","Calculates the bitwise <code>and</code> of two bitvectors.","Returns <code>true</code> if any bit is 1.","Moves all bits from <code>other</code> into <code>Self</code>, leaving <code>other</code> empty.","How many bits it has","Iterator over the underlying blocks of data","","","","","","","","","How many bytes it has","Returns the capacity in bits for this bit vector. …","Clears all bits in this vector.","","","","","","","","","Count the number of 1’s in the bitwise repr","","Calculates the difference between two bitvectors.","","Compares a <code>BitVec</code> to a slice of <code>bool</code>s. Both the <code>BitVec</code> and …","","","","","","","Convert a byte into this type (lowest-order bits set)","Transforms a byte-vector into a <code>BitVec</code>. Each byte becomes …","Creates a <code>BitVec</code> that holds <code>nbits</code> elements, setting each …","Creates a <code>BitVec</code> of the specified length where the value …","","Retrieves the value at index <code>i</code>, or <code>None</code> if the index is …","Grows the <code>BitVec</code> in-place, adding <code>n</code> copies of <code>value</code> to the …","","","Calculates the intersection of two bitvectors. This acts …","","","","","","","","","Returns true if there are no bits in this vector","Returns an iterator over the elements of the vector in …","Returns the total number of bits in this vector","Calculates the nand of two bitvectors.","Flips all bits.","Creates an empty <code>BitVec</code>.","","","","","","","Returns <code>true</code> if all bits are 0.","Calculates the nor of two bitvectors.","Get <code>1</code>","Calculates the bitwise <code>or</code> of two bitvectors.","","Removes the last bit from the BitVec, and returns it. …","Pushes a <code>bool</code> onto the end.","Reserves capacity for at least <code>additional</code> more bits to be …","Reserves the minimum capacity for exactly <code>additional</code> more …","Sets the value of a bit at an index <code>i</code>.","Sets all bits to 1.","Sets the number of bits that this BitVec considers …","Shrinks the capacity of the underlying storage as much as …","","","Splits the <code>BitVec</code> into two at the given bit, retaining the …","Exposes the raw block storage of this BitVec","Exposes the raw block storage of this BitVec","Organises the bits into bytes, such that the first bit in …","","","","Shortens a <code>BitVec</code>, dropping excess elements.","","","","","","","","","","","","","Calculates the union of two bitvectors. This acts like the …","Constructs a new, empty <code>BitVec</code> with the specified capacity.","Calculates the xnor of two bitvectors.","Calculates the xor of two bitvectors.","Get <code>0</code>"],"i":[0,0,0,0,0,1,1,1,1,2,1,1,3,4,5,1,3,4,5,2,1,1,1,4,5,1,1,4,5,1,2,1,1,1,1,1,1,1,3,4,5,2,1,1,1,1,1,1,1,1,1,1,3,4,5,1,3,4,5,1,1,1,1,1,1,3,4,5,3,4,5,1,1,2,1,1,1,1,1,1,1,1,1,1,4,5,1,1,1,1,1,4,5,1,1,3,4,5,1,3,4,5,1,3,4,5,1,1,1,1,2],"f":[null,null,null,null,null,[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["usize",15]],[[],["blocks",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["usize",15]],[[],["usize",15]],[[]],[[]],[[],["iter",3]],[[],["blocks",3]],[[]],[[]],[[]],[[]],[[],["ordering",4]],[[],["usize",15]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["intoiterator",8]]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["u8",15]]],[[]],[[["usize",15],["bool",15]]],[[["usize",15]]],[[["intoiterator",8]]],[[["usize",15]],[["bool",15],["option",4,["bool"]]]],[[["usize",15],["bool",15]]],[[]],[[["usize",15]],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[],["intoiter",3]],[[]],[[]],[[]],[[],["bool",15]],[[],["iter",3]],[[],["usize",15]],[[],["bool",15]],[[]],[[]],[[],[["bool",15],["option",4,["bool"]]]],[[],[["bool",15],["option",4,["bool"]]]],[[],["option",4]],[[],[["bool",15],["option",4,["bool"]]]],[[],[["bool",15],["option",4,["bool"]]]],[[],["option",4]],[[],["bool",15]],[[],["bool",15]],[[]],[[],["bool",15]],[[],[["ordering",4],["option",4,["ordering"]]]],[[],[["bool",15],["option",4,["bool"]]]],[[["bool",15]]],[[["usize",15]]],[[["usize",15]]],[[["usize",15],["bool",15]]],[[]],[[["usize",15]]],[[]],[[]],[[]],[[["usize",15]]],[[]],[[],["vec",3]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[]],[[]],[[["usize",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bool",15]],[[["usize",15]]],[[],["bool",15]],[[],["bool",15]],[[]]],"p":[[3,"BitVec"],[8,"BitBlock"],[3,"IntoIter"],[3,"Iter"],[3,"Blocks"]]},\
"num_bigint":{"doc":"A Big integer (signed version: <code>BigInt</code>, unsigned version: …","tn":["BigInt","BigUint","Minus","NoSign","ParseBigIntError","Plus","Sign","ToBigInt","ToBigUint","TryFromBigIntError","U32Digits","U64Digits","abs","abs_sub","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","assign_from_slice","assign_from_slice","average_ceil","average_ceil","average_floor","average_floor","bit","bit","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitor_assign","bitor_assign","bits","bits","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","bitxor_assign","bitxor_assign","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","cbrt","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone_from","clone_from","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","count","count","count_ones","default","default","description","description","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","divides","eq","eq","eq","eq","eq","extended_gcd_lcm","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_biguint","from_bytes_be","from_bytes_be","from_bytes_le","from_bytes_le","from_f64","from_f64","from_i128","from_i128","from_i64","from_i64","from_radix_be","from_radix_be","from_radix_le","from_radix_le","from_signed_bytes_be","from_signed_bytes_le","from_slice","from_slice","from_str","from_str","from_str_radix","from_str_radix","from_u128","from_u128","from_u64","from_u64","gcd","gcd","gcd_lcm","gcd_lcm","hash","hash","hash","into","into","into","into","into","into","into","into_iter","into_iter","into_original","into_parts","is_even","is_even","is_multiple_of","is_multiple_of","is_negative","is_odd","is_odd","is_one","is_one","is_positive","is_zero","is_zero","iter_u32_digits","iter_u32_digits","iter_u64_digits","iter_u64_digits","last","last","lcm","lcm","len","len","magnitude","mod_floor","mod_floor","modpow","modpow","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","ne","ne","neg","neg","new","new","next","next","next_back","next_back","next_multiple_of","next_multiple_of","not","nth","nth_root","nth_root","nth_root","nth_root","one","one","parse_bytes","parse_bytes","partial_cmp","partial_cmp","partial_cmp","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","pow","prev_multiple_of","prev_multiple_of","product","product","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","rem_assign","set_bit","set_bit","set_one","set_one","set_zero","set_zero","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shl_assign","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","shr_assign","sign","signum","size_hint","size_hint","sqrt","sqrt","sqrt","sqrt","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sum","sum","to_bigint","to_bigint","to_bigint","to_biguint","to_biguint","to_biguint","to_biguint","to_bytes_be","to_bytes_be","to_bytes_le","to_bytes_le","to_f32","to_f32","to_f64","to_f64","to_i128","to_i128","to_i64","to_i64","to_owned","to_owned","to_owned","to_owned","to_owned","to_radix_be","to_radix_be","to_radix_le","to_radix_le","to_signed_bytes_be","to_signed_bytes_le","to_str_radix","to_str_radix","to_string","to_string","to_string","to_string","to_u128","to_u128","to_u32_digits","to_u32_digits","to_u64","to_u64","to_u64_digits","to_u64_digits","trailing_ones","trailing_zeros","trailing_zeros","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","zero","zero"],"q":["num_bigintd":["A big signed integer type.","A big unsigned integer type.","","","","","A Sign is a <code>BigInt</code>’s composing element.","A generic trait for converting a value to a <code>BigInt</code>. This …","A generic trait for converting a value to a <code>BigUint</code>.","The error type returned when a checked conversion …","An iterator of <code>u32</code> digits representation of a <code>BigUint</code> or …","An iterator of <code>u64</code> digits representation of a <code>BigUint</code> or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Reinitializes a <code>BigInt</code>.","Assign a value to a <code>BigUint</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the ceil value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>self</code> and <code>other</code>.","Returns whether the bit in position <code>bit</code> is set, using the …","Returns whether the bit in the given position is set","","","","","","","","","","","","","","","","","Determines the fewest bits necessary to express the <code>BigInt</code>,","Determines the fewest bits necessary to express the <code>BigUint</code>…","","","","","","","","","","","","","","","","","","","","","","","","Returns the truncated principal cube root of <code>self</code> – see …","Returns the truncated principal cube root of <code>self</code> – see …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the number of one bits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Deprecated, use <code>is_multiple_of</code> instead.","Deprecated, use <code>is_multiple_of</code> instead.","","","","","","Greatest common divisor, least common multiple, and …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","","","","","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code>. Each u8 of the input …","Creates and initializes a <code>BigUint</code>. Each u8 of the input …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code> from an array of bytes in …","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>.","","","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) of the number …","Calculates the Greatest Common Divisor (GCD) and Lowest …","Calculates the Greatest Common Divisor (GCD) and Lowest …","","","","","","","","","","","","","Extract the original value, if available. The value will …","Convert this <code>BigInt</code> into its <code>Sign</code> and <code>BigUint</code> magnitude, …","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is divisible by <code>2</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","Returns <code>true</code> if the number is a multiple of <code>other</code>.","","Returns <code>true</code> if the number is not divisible by <code>2</code>.","Returns <code>true</code> if the number is not divisible by <code>2</code>.","","","","","","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u32</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","Returns an iterator of <code>u64</code> digits representation of the …","","","Calculates the Lowest Common Multiple (LCM) of the number …","Calculates the Lowest Common Multiple (LCM) of the number …","","","Returns the magnitude of the <code>BigInt</code> as a <code>BigUint</code>.","","","Returns <code>(self ^ exponent) mod modulus</code>","Returns <code>(self ^ exponent) % modulus</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Negate Sign value.","Creates and initializes a BigInt.","Creates and initializes a <code>BigUint</code>.","","","","","Rounds up to nearest multiple of argument.","Rounds up to nearest multiple of argument.","","","","Returns the truncated principal <code>n</code>th root of <code>self</code> – See …","Returns the truncated principal <code>n</code>th root of <code>self</code> – see …","","","","Creates and initializes a <code>BigInt</code>.","Creates and initializes a <code>BigUint</code>. The input slice must …","","","","","","","Returns <code>self ^ exponent</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns <code>self ^ exponent</code>.","Rounds down to nearest multiple of argument.","Rounds down to nearest multiple of argument.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Sets or clears the bit in the given position, using the two…","Sets or clears the bit in the given positioneturns the sign of the <code>BigInt</code> as a <code>Sign</code>.","","","","Returns the truncated principal square root of <code>self</code> – …","","","Returns the truncated principal square root of <code>self</code> – …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Converts the value of <code>self</code> to a <code>BigInt</code>.","","","Converts the value of <code>self</code> to a <code>BigUint</code>.","Converts this <code>BigInt</code> into a <code>BigUint</code>, if it’s not …","","","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","Returns the sign and the byte representation of the <code>BigInt</code> …","Returns the byte representation of the <code>BigUint</code> in …","","","","","","","","","","","","","","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in big-endian …","Returns the integer in the requested base in little-endian …","Returns the integer in the requested base in little-endian …","Returns the two’s-complement byte representation of the …","Returns the two’s-complement byte representation of the …","Returns the integer formatted as a string in the given …","Returns the integer formatted as a string in the given …","","","","","","","Returns the sign and the <code>u32</code> digits representation of the …","Returns the <code>u32</code> digits representation of the <code>BigUint</code> …","","","Returns the sign and the <code>u64</code> digits representation of the …","Returns the <code>u64</code> digits representation of the <code>BigUint</code> …","Returns the number of least-significant bits that are ones.","Returns the number of least-significant bits that are zero,","Returns the number of least-significant bits that are zero,","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[0,0,1,1,0,1,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,2,3,3,2,2,3,3,2,2,3,3,2,2,3,3,2,3,2,2,3,3,2,2,3,3,2,4,5,3,1,6,7,2,4,5,3,1,6,7,2,2,3,3,2,2,3,2,2,3,2,2,3,2,2,3,2,3,1,6,7,2,3,2,3,1,6,7,2,3,1,4,5,3,2,3,6,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,3,2,3,2,3,1,6,7,2,2,2,2,2,2,2,3,3,3,3,3,3,1,6,6,7,7,2,2,2,2,2,2,2,2,2,2,2,2,2,2,4,5,3,3,3,3,3,3,3,1,6,7,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,2,4,5,3,1,6,7,4,5,7,2,2,3,2,3,2,2,3,2,3,2,2,3,2,3,2,3,4,5,2,3,4,5,2,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,6,7,2,1,2,3,4,5,4,5,2,3,2,5,2,2,3,3,2,3,2,3,2,3,1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,2,3,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,4,5,2,2,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,3,3,3,3,3,3,3,3,2,3,8,2,3,9,2,2,3,2,3,2,3,2,3,2,3,2,3,2,3,2,3,1,6,7,2,3,2,3,2,2,2,3,2,3,6,7,2,3,2,3,2,3,2,3,3,2,3,2,4,5,3,3,3,3,3,3,3,3,3,1,6,7,2,4,5,3,1,6,7,2,4,5,3,1,6,7,2,3],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i64",15]]],[[["u8",15]]],[[["bigint",3]]],[[["i128",15]]],[[["u16",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["i32",15]]],[[["bigint",3]]],[[["biguint",3]]],[[["u128",15]]],[[["u64",15]]],[[["u32",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["biguint",3]]],[[["sign",4]]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["bool",15]],[[["u64",15]],["bool",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[],["u64",15]],[[],["u64",15]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["biguint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["bigint",3]],[["bigint",3],["option",4,["bigint"]]]],[[["biguint",3]],[["option",4,["biguint"]],["biguint",3]]],[[]],[[]],[[],["sign",4]],[[],["parsebiginterror",3]],[[],["tryfrombiginterror",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bigint",3]],["ordering",4]],[[["biguint",3]],["ordering",4]],[[["sign",4]],["ordering",4]],[[],["usize",15]],[[],["usize",15]],[[],["u64",15]],[[],["bigint",3]],[[],["biguint",3]],[[],["str",15]],[[],["str",15]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i128",15]]],[[["i32",15]]],[[["bigint",3]]],[[["i64",15]]],[[["bigint",3]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["u64",15]]],[[["u128",15]]],[[["u32",15]]],[[["usize",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u8",15]]],[[["u16",15]]],[[]],[[["biguint",3]],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]]],[[["biguint",3]]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[["sign",4]],["bool",15]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[["bigint",3]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["i128",15]]],[[["u128",15]]],[[["usize",15]]],[[["u32",15]]],[[["i8",15]]],[[["i64",15]]],[[]],[[["i16",15]]],[[["u16",15]]],[[["biguint",3]]],[[["u8",15]]],[[["isize",15]]],[[["i32",15]]],[[["u64",15]]],[[]],[[]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[]],[[]],[[]],[[]],[[["sign",4],["biguint",3]],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["f64",15]],[["bigint",3],["option",4,["bigint"]]]],[[["f64",15]],[["option",4,["biguint"]],["biguint",3]]],[[["i128",15]],[["bigint",3],["option",4,["bigint"]]]],[[["i128",15]],[["option",4,["biguint"]],["biguint",3]]],[[["i64",15]],[["bigint",3],["option",4,["bigint"]]]],[[["i64",15]],[["option",4,["biguint"]],["biguint",3]]],[[["sign",4],["u32",15]],[["bigint",3],["option",4,["bigint"]]]],[[["u32",15]],[["option",4,["biguint"]],["biguint",3]]],[[["sign",4],["u32",15]],[["bigint",3],["option",4,["bigint"]]]],[[["u32",15]],[["option",4,["biguint"]],["biguint",3]]],[[],["bigint",3]],[[],["bigint",3]],[[["sign",4]],["bigint",3]],[[],["biguint",3]],[[["str",15]],[["bigint",3],["parsebiginterror",3],["result",4,["bigint","parsebiginterror"]]]],[[["str",15]],[["parsebiginterror",3],["biguint",3],["result",4,["biguint","parsebiginterror"]]]],[[["str",15],["u32",15]],[["bigint",3],["parsebiginterror",3],["result",4,["bigint","parsebiginterror"]]]],[[["str",15],["u32",15]],[["parsebiginterror",3],["biguint",3],["result",4,["biguint","parsebiginterror"]]]],[[["u128",15]],[["bigint",3],["option",4,["bigint"]]]],[[["u128",15]],[["option",4,["biguint"]],["biguint",3]]],[[["u64",15]],[["bigint",3],["option",4,["bigint"]]]],[[["u64",15]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],["bigint",3]],[[]],[[["bigint",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[["bigint",3]],["bool",15]],[[["biguint",3]],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u32digits",3]],[[],["u32digits",3]],[[],["u64digits",3]],[[],["u64digits",3]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["option",4,["u64"]],["u64",15]]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[],["usize",15]],[[],["usize",15]],[[],["biguint",3]],[[["bigint",3]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[]],[[]],[[["i8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["sign",4]],["sign",4]],[[["bigint",3]]],[[["u8",15]]],[[["i128",15]]],[[["i64",15]]],[[["i32",15]]],[[["u128",15]]],[[["bigint",3]]],[[["u64",15]]],[[["u32",15]]],[[["isize",15]]],[[["i16",15]]],[[["i8",15]]],[[["usize",15]]],[[["u16",15]]],[[["biguint",3]]],[[["usize",15]]],[[["u8",15]]],[[["u128",15]]],[[["biguint",3]]],[[["u64",15]]],[[["u16",15]]],[[["u32",15]]],[[["parsebiginterror",3]],["bool",15]],[[["tryfrombiginterror",3]],["bool",15]],[[],["bigint",3]],[[],["sign",4]],[[["sign",4],["u32",15],["vec",3,["u32"]]],["bigint",3]],[[["u32",15],["vec",3,["u32"]]],["biguint",3]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["option",4,["u64"]],["u64",15]]],[[],["option",4]],[[],["option",4]],[[]],[[]],[[],["bigint",3]],[[["usize",15]],[["option",4,["u64"]],["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[],["bigint",3]],[[],["biguint",3]],[[["u32",15]],[["bigint",3],["option",4,["bigint"]]]],[[["u32",15]],[["option",4,["biguint"]],["biguint",3]]],[[["bigint",3]],[["ordering",4],["option",4,["ordering"]]]],[[["biguint",3]],[["ordering",4],["option",4,["ordering"]]]],[[["sign",4]],[["option",4,["ordering"]],["ordering",4]]],[[["u128",15]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["biguint",3]],["bigint",3]],[[["u32",15]]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u32",15]]],[[]],[[]],[[]],[[]],[[["u32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]]],[[["u128",15]]],[[["usize",15]]],[[["u16",15]]],[[["u8",15]]],[[["bigint",3]]],[[["bigint",3]]],[[["isize",15]]],[[["i16",15]]],[[["i8",15]]],[[["i128",15]]],[[["i64",15]]],[[["u64",15]]],[[["i32",15]]],[[["u64",15]]],[[["u128",15]]],[[["biguint",3]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["u32",15]]],[[["biguint",3]]],[[["u64",15],["bool",15]]],[[["u64",15],["bool",15]]],[[]],[[]],[[]],[[]],[[["u32",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["isize",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["u32",15]]],[[["i8",15]]],[[["isize",15]]],[[["isize",15]]],[[["i8",15]]],[[["i16",15]]],[[["i16",15]]],[[["i32",15]]],[[["i32",15]]],[[["i64",15]]],[[["i64",15]]],[[["i128",15]]],[[["i128",15]]],[[["usize",15]]],[[["usize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u64",15]]],[[["u64",15]]],[[["u32",15]]],[[["u16",15]]],[[["u16",15]]],[[["u8",15]]],[[["u8",15]]],[[["u16",15]]],[[["isize",15]]],[[["isize",15]]],[[["i128",15]]],[[["i128",15]]],[[["i64",15]]],[[["i64",15]]],[[["i32",15]]],[[["i32",15]]],[[["i16",15]]],[[["i16",15]]],[[["i8",15]]],[[["i8",15]]],[[["usize",15]]],[[["usize",15]]],[[["u128",15]]],[[["u128",15]]],[[["u64",15]]],[[["u64",15]]],[[["u16",15]]],[[["u8",15]]],[[["u8",15]]],[[["u32",15]]],[[["u32",15]]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u8",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["i8",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["i128",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["isize",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["i64",15]],["biguint",3]],[[["i16",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["i32",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]]],[[["u32",15]]],[[["u32",15]]],[[["u16",15]]],[[["i16",15]]],[[["i8",15]]],[[["u8",15]]],[[["u64",15]]],[[["u8",15]]],[[["isize",15]]],[[["isize",15]]],[[["u16",15]]],[[["u128",15]]],[[["i128",15]]],[[["i128",15]]],[[["i64",15]]],[[["i64",15]]],[[["i32",15]]],[[["u128",15]]],[[["usize",15]]],[[["usize",15]]],[[["i8",15]]],[[["i32",15]]],[[["i16",15]]],[[["i16",15]]],[[["usize",15]]],[[["u8",15]]],[[["u8",15]]],[[["u16",15]]],[[["u16",15]]],[[["u32",15]]],[[["u32",15]]],[[["u64",15]]],[[["u64",15]]],[[["isize",15]]],[[["isize",15]]],[[["i128",15]]],[[["i128",15]]],[[["i64",15]]],[[["i64",15]]],[[["i32",15]]],[[["i32",15]]],[[["i16",15]]],[[["i8",15]]],[[["i8",15]]],[[["usize",15]]],[[["u128",15]]],[[["u128",15]]],[[],["sign",4]],[[],["bigint",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["u64",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["u128",15]],["bigint",3]],[[["u64",15]],["bigint",3]],[[["u32",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["isize",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["i16",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["usize",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["u16",15]],["bigint",3]],[[["i64",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["i32",15]],["bigint",3]],[[["i8",15]],["bigint",3]],[[["i128",15]],["bigint",3]],[[["u8",15]],["bigint",3]],[[["bigint",3]],["bigint",3]],[[["u16",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u16",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["u128",15]],["biguint",3]],[[["u64",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u8",15]],["biguint",3]],[[["u32",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["usize",15]],["biguint",3]],[[["biguint",3]],["biguint",3]],[[["i64",15]]],[[["i128",15]]],[[["bigint",3]]],[[["bigint",3]]],[[["u8",15]]],[[["u16",15]]],[[["usize",15]]],[[["i8",15]]],[[["i16",15]]],[[["isize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[["i32",15]]],[[["u8",15]]],[[["biguint",3]]],[[["biguint",3]]],[[["u16",15]]],[[["usize",15]]],[[["u32",15]]],[[["u64",15]]],[[["u128",15]]],[[]],[[]],[[],[["bigint",3],["option",4,["bigint"]]]],[[],[["bigint",3],["option",4,["bigint"]]]],[[],[["bigint",3],["option",4,["bigint"]]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[],[["option",4,["biguint"]],["biguint",3]]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["f32",15],["option",4,["f32"]]]],[[],[["f32",15],["option",4,["f32"]]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["option",4,["i64"]],["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]],[["vec",3,["u8"]],["u8",15]]],[[["u32",15]]],[[["u32",15]],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[],[["vec",3,["u8"]],["u8",15]]],[[["u32",15]],["string",3]],[[["u32",15]],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["option",4,["u128"]],["u128",15]]],[[]],[[],[["u32",15],["vec",3,["u32"]]]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[]],[[],[["vec",3,["u64"]],["u64",15]]],[[],["u64",15]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u64"]],["u64",15]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[["i32",15]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[["i16",15]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[],["result",4]],[[["i8",15]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[["i128",15]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[["i64",15]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[["isize",15]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[["bigint",3]],[["result",4,["biguint","tryfrombiginterror"]],["tryfrombiginterror",3],["biguint",3]]],[[["bigint",3]],[["result",4,["biguint","tryfrombiginterror"]],["biguint",3],["tryfrombiginterror",3,["bigint"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["bigint",3]],[[],["biguint",3]]],"p":[[4,"Sign"],[3,"BigInt"],[3,"BigUint"],[3,"U32Digits"],[3,"U64Digits"],[3,"ParseBigIntError"],[3,"TryFromBigIntError"],[8,"ToBigInt"],[8,"ToBigUint"]]},\
"num_integer":{"doc":"Integer trait and functions.","t":[8,3,8,3,8,5,10,5,10,5,11,11,11,11,5,11,11,11,11,5,11,5,10,5,11,5,10,10,11,11,11,11,11,11,5,10,12,5,11,11,11,11,10,10,10,5,10,5,10,5,11,11,11,11,5,10,11,5,11,11,11,11,11,11,11,11,11,12,12],"n":["Average","ExtendedGcd","Integer","IterBinomial","Roots","average_ceil","average_ceil","average_floor","average_floor","binomial","borrow","borrow","borrow_mut","borrow_mut","cbrt","cbrt","cbrt","clone","clone_into","div_ceil","div_ceil","div_floor","div_floor","div_mod_floor","div_mod_floor","div_rem","div_rem","divides","eq","extended_gcd","extended_gcd_lcm","fmt","from","from","gcd","gcd","gcd","gcd_lcm","gcd_lcm","into","into","into_iter","is_even","is_multiple_of","is_odd","lcm","lcm","mod_floor","mod_floor","multinomial","ne","new","next","next_multiple_of","nth_root","nth_root","prev_multiple_of","sqrt","sqrt","sqrt","to_owned","try_from","try_from","try_into","try_into","type_id","type_id","x","y"],"q":["num_integer","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Provides methods to compute the average of two integers, …","Greatest common divisor and Bézout coefficients","","An iterator over binomial coefficients.","Provides methods to compute an integer’s square root, …","Returns the ceiling value of the average of <code>x</code> and <code>y</code> – …","Returns the ceiling value of the average of <code>self</code> and <code>other</code>.","Returns the floor value of the average of <code>x</code> and <code>y</code> – see …","Returns the floor value of the average of <code>self</code> and <code>other</code>. …","Calculate the binomial coefficient.","","","","","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","Returns the truncated principal cube root of an integer –","","","Ceiled integer division","Ceiled integer division.","Floored integer division","Floored integer division.","Simultaneous floored integer division and modulus","Simultaneous floored integer division and modulus. Returns …","Simultaneous integer division and modulus","Simultaneous truncated integer division and modulus. …","Deprecated, use <code>is_multiple_of</code> instead.","","Greatest common divisor and Bézout coefficients.","Greatest common divisor, least common multiple, and …","","","","Calculates the Greatest Common Divisor (GCD) of the number …","Greatest Common Divisor (GCD).","","Calculates the Greatest Common Divisor (GCD) and Lowest …","Greatest Common Divisor (GCD) and Lowest Common Multiple …","","","","Returns <code>true</code> if the number is even.","Returns <code>true</code> if <code>self</code> is a multiple of <code>other</code>.","Returns <code>true</code> if the number is odd.","Calculates the Lowest Common Multiple (LCM) of the number …","Lowest Common Multiple (LCM).","Floored integer modulus","Floored integer modulo, satisfying:","Calculate the multinomial coefficient.","","For a given n, iterate over all binomial coefficients …","","Rounds up to nearest multiple of argument.","Returns the truncated principal <code>n</code>th root of an integer – …","Returns the truncated principal <code>n</code>th root of an integer – …","Rounds down to nearest multiple of argument.","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","Returns the truncated principal square root of an integer …","","","","","","","","",""],"i":[0,0,0,0,0,0,1,0,1,0,2,3,2,3,0,4,4,3,3,0,5,0,5,0,5,0,5,5,3,5,5,3,2,3,0,5,3,0,5,2,3,2,5,5,5,0,5,0,5,0,3,2,2,5,0,4,5,0,4,4,3,2,3,2,3,2,3,3,3],"f":[null,null,null,null,null,[[["average",8]],["average",8]],[[]],[[["average",8]],["average",8]],[[]],[[["integer",8],["clone",8]],[["integer",8],["clone",8]]],[[]],[[]],[[]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[],["extendedgcd",3]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]]],[[]],[[["integer",8]]],[[]],[[],["bool",15]],[[["extendedgcd",3]],["bool",15]],[[],["extendedgcd",3]],[[]],[[["formatter",3]],["result",6]],[[]],[[]],[[["integer",8]],["integer",8]],[[]],null,[[["integer",8]]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[["integer",8]],["integer",8]],[[]],[[["integer",8]],["integer",8]],[[]],[[],[["integer",8],["clone",8]]],[[["extendedgcd",3]],["bool",15]],[[],["iterbinomial",3]],[[],["option",4]],[[]],[[["u32",15],["roots",8]],["roots",8]],[[["u32",15]]],[[]],[[["roots",8]],["roots",8]],[[]],[[]],[[]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,null],"p":[[8,"Average"],[3,"IterBinomial"],[3,"ExtendedGcd"],[8,"Roots"],[8,"Integer"]]},\
"num_traits":{"doc":"Numeric traits for generic mathematics","t":[13,4,16,13,8,8,8,8,8,8,3,8,11,11,11,11,0,0,5,5,5,0,11,11,11,11,11,10,0,0,11,11,12,0,0,0,0,11,11,11,11,11,11,11,8,10,10,8,8,8,8,10,5,10,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,10,10,10,10,10,10,10,10,10,10,8,8,8,10,10,11,10,11,10,10,10,11,10,11,10,10,10,10,10,10,10,10,10,10,11,10,10,10,10,10,11,10,10,10,10,11,10,11,10,10,10,10,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,10,10,11,10,10,10,10,10,10,10,10,10,10,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,10,11,10,11,10,11,8,8,11,10,5,10,11,11,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,0,0,0,0,0,0,8,8,8,8,8,8,8,8,10,10,10,10,10,10,10,10,8,16,10,8,8,16,10,10,8,8,8,10,10,10,8,8,8,8,10,10,10,10,10,8,8,8,8,8,8,10,10,10,10,10,10,16,8,5,5,10,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,8,8,5,10,5,10,10,10,5,10],"n":["Empty","FloatErrorKind","FromStrRadixErr","Invalid","Num","NumAssign","NumAssignOps","NumAssignRef","NumOps","NumRef","ParseFloatError","RefNum","borrow","borrow","borrow_mut","borrow_mut","bounds","cast","clamp","clamp_max","clamp_min","float","fmt","fmt","fmt","from","from","from_str_radix","identities","int","into","into","kind","ops","pow","real","sign","to_string","try_from","try_from","try_into","try_into","type_id","type_id","Bounded","max_value","min_value","AsPrimitive","FromPrimitive","NumCast","ToPrimitive","as_","cast","from","from_f32","from_f64","from_i128","from_i16","from_i32","from_i64","from_i8","from_isize","from_u128","from_u16","from_u32","from_u64","from_u8","from_usize","to_f32","to_f64","to_i128","to_i16","to_i32","to_i64","to_i8","to_isize","to_u128","to_u16","to_u32","to_u64","to_u8","to_usize","E","FRAC_1_PI","FRAC_1_SQRT_2","FRAC_2_PI","FRAC_2_SQRT_PI","FRAC_PI_2","FRAC_PI_3","FRAC_PI_4","FRAC_PI_6","FRAC_PI_8","Float","FloatConst","FloatCore","LN_10","LN_2","LOG10_2","LOG10_E","LOG2_10","LOG2_E","PI","SQRT_2","TAU","abs","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","ceil","classify","classify","cos","cosh","epsilon","epsilon","exp","exp2","exp_m1","floor","floor","fract","fract","hypot","infinity","infinity","integer_decode","integer_decode","is_finite","is_finite","is_infinite","is_infinite","is_nan","is_nan","is_normal","is_normal","is_sign_negative","is_sign_negative","is_sign_positive","is_sign_positive","ln","ln_1p","log","log10","log2","max","max","max_value","max_value","min","min","min_positive_value","min_positive_value","min_value","min_value","mul_add","nan","nan","neg_infinity","neg_infinity","neg_zero","neg_zero","powf","powi","powi","recip","recip","round","round","signum","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_degrees","to_radians","to_radians","trunc","trunc","One","Zero","is_one","is_zero","one","one","set_one","set_zero","zero","zero","PrimInt","count_ones","count_zeros","from_be","from_le","leading_zeros","pow","rotate_left","rotate_right","signed_shl","signed_shr","swap_bytes","to_be","to_le","trailing_zeros","unsigned_shl","unsigned_shr","checked","inv","mul_add","overflowing","saturating","wrapping","CheckedAdd","CheckedDiv","CheckedMul","CheckedNeg","CheckedRem","CheckedShl","CheckedShr","CheckedSub","checked_add","checked_div","checked_mul","checked_neg","checked_rem","checked_shl","checked_shr","checked_sub","Inv","Output","inv","MulAdd","MulAddAssign","Output","mul_add","mul_add_assign","OverflowingAdd","OverflowingMul","OverflowingSub","overflowing_add","overflowing_mul","overflowing_sub","Saturating","SaturatingAdd","SaturatingMul","SaturatingSub","saturating_add","saturating_add","saturating_mul","saturating_sub","saturating_sub","WrappingAdd","WrappingMul","WrappingNeg","WrappingShl","WrappingShr","WrappingSub","wrapping_add","wrapping_mul","wrapping_neg","wrapping_shl","wrapping_shr","wrapping_sub","Output","Pow","checked_pow","pow","pow","Real","abs","abs_sub","acos","acosh","asin","asinh","atan","atan2","atanh","cbrt","ceil","cos","cosh","epsilon","exp","exp2","exp_m1","floor","fract","hypot","is_sign_negative","is_sign_positive","ln","ln_1p","log","log10","log2","max","max_value","min","min_positive_value","min_value","mul_add","powf","powi","recip","round","signum","sin","sin_cos","sinh","sqrt","tan","tanh","to_degrees","to_radians","trunc","Signed","Unsigned","abs","abs","abs_sub","abs_sub","is_negative","is_positive","signum","signum"],"q":["num_traits","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::bounds","","","num_traits::cast","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::float","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::identities","","","","","","","","","","num_traits::int","","","","","","","","","","","","","","","","","num_traits::ops","","","","","","num_traits::ops::checked","","","","","","","","","","","","","","","","num_traits::ops::inv","","","num_traits::ops::mul_add","","","","","num_traits::ops::overflowing","","","","","","num_traits::ops::saturating","","","","","","","","","num_traits::ops::wrapping","","","","","","","","","","","","num_traits::pow","","","","","num_traits::real","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","num_traits::sign","","","","","","","","",""],"d":["","","","","The base trait for numeric types, covering <code>0</code> and <code>1</code> values, …","The trait for <code>Num</code> types which also implement assignment …","The trait for types implementing numeric assignment …","The trait for <code>NumAssign</code> types which also implement …","The trait for types implementing basic numeric operations","The trait for <code>Num</code> types which also implement numeric …","","The trait for references which implement numeric …","","","","","","","A value bounded by a minimum and a maximum","A value bounded by a maximum value","A value bounded by a minimum value","","","","","","","Convert from a string and radix (typically <code>2..=36</code>).","","","","","","","","","","","","","","","","","Numbers which have upper and lower bounds","returns the largest finite number this type can represent","returns the smallest finite number this type can represent","A generic interface for casting between machine scalars …","A generic trait for converting a number to a value.","An interface for casting between machine scalars.","A generic trait for converting a value to a number.","Convert a value to another, using the <code>as</code> operator.","Cast from one machine scalar to another.","Creates a number from another value that can be converted …","Converts a <code>f32</code> to return an optional value of this type. …","Converts a <code>f64</code> to return an optional value of this type. …","Converts an <code>i128</code> to return an optional value of this type. …","Converts an <code>i16</code> to return an optional value of this type. …","Converts an <code>i32</code> to return an optional value of this type. …","Converts an <code>i64</code> to return an optional value of this type. …","Converts an <code>i8</code> to return an optional value of this type. …","Converts an <code>isize</code> to return an optional value of this …","Converts an <code>u128</code> to return an optional value of this type. …","Converts an <code>u16</code> to return an optional value of this type. …","Converts an <code>u32</code> to return an optional value of this type. …","Converts an <code>u64</code> to return an optional value of this type. …","Converts an <code>u8</code> to return an optional value of this type. …","Converts a <code>usize</code> to return an optional value of this type. …","Converts the value of <code>self</code> to an <code>f32</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>f64</code>. Overflows may map to …","Converts the value of <code>self</code> to an <code>i128</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i16</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i32</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i64</code>. If the value cannot …","Converts the value of <code>self</code> to an <code>i8</code>. If the value cannot be","Converts the value of <code>self</code> to an <code>isize</code>. If the value …","Converts the value of <code>self</code> to a <code>u128</code>. If the value cannot …","Converts the value of <code>self</code> to a <code>u16</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u32</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u64</code>. If the value cannot be","Converts the value of <code>self</code> to a <code>u8</code>. If the value cannot be …","Converts the value of <code>self</code> to a <code>usize</code>. If the value cannot …","Return Euler’s number.","Return <code>1.0 / π</code>.","Return <code>1.0 / sqrt(2.0)</code>.","Return <code>2.0 / π</code>.","Return <code>2.0 / sqrt(π)</code>.","Return <code>π / 2.0</code>.","Return <code>π / 3.0</code>.","Return <code>π / 4.0</code>.","Return <code>π / 6.0</code>.","Return <code>π / 8.0</code>.","Generic trait for floating point numbers","","Generic trait for floating point numbers that works with …","Return <code>ln(10.0)</code>.","Return <code>ln(2.0)</code>.","Return <code>log10(2.0)</code>.","Return <code>log10(e)</code>.","Return <code>log2(10.0)</code>.","Return <code>log2(e)</code>.","Return Archimedes’ constant <code>π</code>.","Return <code>sqrt(2.0)</code>.","Return the full circle constant <code>τ</code>.","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","Computes the absolute value of <code>self</code>. Returns …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Returns the smallest integer greater than or equal to a …","Returns the floating point category of the number. If only …","Returns the floating point category of the number. If only …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns positive infinity.","Returns the infinite value.","Returns the mantissa, base 2 exponent, and sign as …","Returns the mantissa, base 2 exponent, and sign as …","Returns <code>true</code> if this number is neither infinite nor <code>NaN</code>.","Returns <code>true</code> if the number is neither infinite or NaN.","Returns <code>true</code> if this value is positive infinity or …","Returns <code>true</code> if the number is infinite.","Returns <code>true</code> if this value is <code>NaN</code> and false otherwise.","Returns <code>true</code> if the number is NaN.","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if the number is neither zero, infinite, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code> and …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code> and …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Returns NaN.","Returns the <code>NaN</code> value.","Returns negative infinity.","Returns the negative infinite value.","Returns <code>-0.0</code>.","Returns <code>-0.0</code>.","Raise a number to a floating point power.","Raise a number to an integer power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the reciprocal (multiplicative inverse) of the …","Returns the nearest integer to a number. Round half-way …","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts to degrees, assuming the number is in radians.","Converts radians to degrees.","Converts to radians, assuming the number is in degrees.","Converts degrees to radians.","Return the integer part of a number.","Return the integer part of a number.","Defines a multiplicative identity element for <code>Self</code>.","Defines an additive identity element for <code>Self</code>.","Returns <code>true</code> if <code>self</code> is equal to the multiplicative …","Returns <code>true</code> if <code>self</code> is equal to the additive identity.","Returns the multiplicative identity, <code>1</code>.","Returns the multiplicative identity element of <code>Self</code>, <code>1</code>.","Sets <code>self</code> to the multiplicative identity element of <code>Self</code>, <code>1</code>…","Sets <code>self</code> to the additive identity element of <code>Self</code>, <code>0</code>.","Returns the additive identity, <code>0</code>.","Returns the additive identity element of <code>Self</code>, <code>0</code>.","Generic trait for primitive integers.","Returns the number of ones in the binary representation of …","Returns the number of zeros in the binary representation …","Convert an integer from big endian to the target’s …","Convert an integer from little endian to the target’s …","Returns the number of leading zeros in the binary …","Raises self to the power of <code>exp</code>, using exponentiation by …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","Reverses the byte order of the integer.","Convert <code>self</code> to big endian from the target’s endianness.","Convert <code>self</code> to little endian from the target’s …","Returns the number of trailing zeros in the binary …","Shifts the bits to the left by a specified amount, <code>n</code>, …","Shifts the bits to the right by a specified amount, <code>n</code>, …","","","","","","","Performs addition that returns <code>None</code> instead of wrapping …","Performs division that returns <code>None</code> instead of panicking …","Performs multiplication that returns <code>None</code> instead of …","Performs negation that returns <code>None</code> if the result can’t …","Performs an integral remainder that returns <code>None</code> instead …","Performs a left shift that returns <code>None</code> on shifts larger …","Performs a right shift that returns <code>None</code> on shifts larger …","Performs subtraction that returns <code>None</code> instead of wrapping …","Adds two numbers, checking for overflow. If overflow …","Divides two numbers, checking for underflow, overflow and …","Multiplies two numbers, checking for underflow or …","Negates a number, returning <code>None</code> for results that can’t …","Finds the remainder of dividing two numbers, checking for …","Checked shift left. Computes <code>self &lt;&lt; rhs</code>, returning <code>None</code> …","Checked shift right. Computes <code>self &gt;&gt; rhs</code>, returning <code>None</code> …","Subtracts two numbers, checking for underflow. If …","Unary operator for retrieving the multiplicative inverse, …","The result after applying the operator.","Returns the multiplicative inverse of <code>self</code>.","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","The fused multiply-add assignment operation.","The resulting type after applying the fused multiply-add.","Performs the fused multiply-add operation.","Performs the fused multiply-add operation.","Performs addition with a flag for overflow.","Performs multiplication with a flag for overflow.","Performs substraction with a flag for overflow.","Returns a tuple of the sum along with a boolean indicating …","Returns a tuple of the product along with a boolean …","Returns a tuple of the difference along with a boolean …","Saturating math operations. Deprecated, use <code>SaturatingAdd</code>, …","Performs addition that saturates at the numeric bounds …","Performs multiplication that saturates at the numeric …","Performs subtraction that saturates at the numeric bounds …","Saturating addition operator. Returns a+b, saturating at …","Saturating addition. Computes <code>self + other</code>, saturating at …","Saturating multiplication. Computes <code>self * other</code>, …","Saturating subtraction operator. Returns a-b, saturating …","Saturating subtraction. Computes <code>self - other</code>, saturating …","Performs addition that wraps around on overflow.","Performs multiplication that wraps around on overflow.","Performs a negation that does not panic.","Performs a left shift that does not panic.","Performs a right shift that does not panic.","Performs subtraction that wraps around on overflow.","Wrapping (modular) addition. Computes <code>self + other</code>, …","Wrapping (modular) multiplication. Computes <code>self * other</code>, …","Wrapping (modular) negation. Computes <code>-self</code>, wrapping …","Panic-free bitwise shift-left; yields <code>self &lt;&lt; mask(rhs)</code>, …","Panic-free bitwise shift-right; yields <code>self &gt;&gt; mask(rhs)</code>, …","Wrapping (modular) subtraction. Computes <code>self - other</code>, …","The result after applying the operator.","Binary operator for raising a value to a power.","Raises a value to the power of exp, returning <code>None</code> if an …","Raises a value to the power of exp, using exponentiation …","Returns <code>self</code> to the power <code>rhs</code>.","A trait for real number types that do not necessarily have …","Computes the absolute value of <code>self</code>. Returns <code>Float::nan()</code> …","The positive difference of two numbers.","Computes the arccosine of a number. Return value is in …","Inverse hyperbolic cosine function.","Computes the arcsine of a number. Return value is in …","Inverse hyperbolic sine function.","Computes the arctangent of a number. Return value is in …","Computes the four quadrant arctangent of <code>self</code> (<code>y</code>) and <code>other</code>…","Inverse hyperbolic tangent function.","Take the cubic root of a number.","Returns the smallest integer greater than or equal to a …","Computes the cosine of a number (in radians).","Hyperbolic cosine function.","Returns epsilon, a small positive value.","Returns <code>e^(self)</code>, (the exponential function).","Returns <code>2^(self)</code>.","Returns <code>e^(self) - 1</code> in a way that is accurate even if the …","Returns the largest integer less than or equal to a number.","Returns the fractional part of a number.","Calculate the length of the hypotenuse of a right-angle …","Returns <code>true</code> if <code>self</code> is negative, including <code>-0.0</code>, …","Returns <code>true</code> if <code>self</code> is positive, including <code>+0.0</code>, …","Returns the natural logarithm of the number.","Returns <code>ln(1+n)</code> (natural logarithm) more accurately than if","Returns the logarithm of the number with respect to an …","Returns the base 10 logarithm of the number.","Returns the base 2 logarithm of the number.","Returns the maximum of the two numbers.","Returns the largest finite value that this type can …","Returns the minimum of the two numbers.","Returns the smallest positive, normalized value that this …","Returns the smallest finite value that this type can …","Fused multiply-add. Computes <code>(self * a) + b</code> with only one …","Raise a number to a real number power.","Raise a number to an integer power.","Take the reciprocal (inverse) of a number, <code>1/x</code>.","Returns the nearest integer to a number. Round half-way …","Returns a number that represents the sign of <code>self</code>.","Computes the sine of a number (in radians).","Simultaneously computes the sine and cosine of the number, …","Hyperbolic sine function.","Take the square root of a number.","Computes the tangent of a number (in radians).","Hyperbolic tangent function.","Converts radians to degrees.","Converts degrees to radians.","Return the integer part of a number.","Useful functions for signed numbers (i.e. numbers that can …","A trait for values which cannot be negative","Computes the absolute value.","Computes the absolute value.","The positive difference of two numbers.","The positive difference of two numbers.","Returns true if the number is negative and false if the …","Returns true if the number is positive and false if the …","Returns the sign of the number.","Returns the sign of the number."],"i":[1,0,2,1,0,0,0,0,0,0,0,0,1,3,1,3,0,0,0,0,0,0,1,3,3,1,3,2,0,0,1,3,3,0,0,0,0,3,1,3,1,3,1,3,0,4,4,0,0,0,0,5,0,6,7,7,7,7,7,7,7,7,7,7,7,7,7,7,8,8,8,8,8,8,8,8,8,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,0,0,0,9,9,9,9,9,9,9,9,9,10,11,10,10,10,10,10,10,10,10,10,10,11,11,10,10,10,11,10,10,10,10,10,11,10,11,10,11,10,11,10,10,11,10,11,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,11,10,10,11,11,10,11,10,10,11,10,11,10,11,10,10,10,11,10,11,10,11,10,11,10,10,10,10,10,10,11,10,11,10,10,11,0,0,12,13,0,12,12,13,0,13,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,15,16,17,18,19,20,21,22,0,23,23,0,0,24,24,25,0,0,0,26,27,28,0,0,0,0,29,30,31,29,32,0,0,0,0,0,0,33,34,35,36,37,38,39,0,0,0,39,0,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,0,0,0,41,0,41,41,41,0,41],"f":[null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],null,null,[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],[[["partialord",8]],["partialord",8]],null,[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[["str",15],["u32",15]],["result",4]],null,null,[[]],[[]],null,null,null,null,null,[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],null,[[]],[[]],null,null,null,null,[[]],[[["numcast",8]],[["option",4],["numcast",8]]],[[["toprimitive",8]],["option",4]],[[["f32",15]],["option",4]],[[["f64",15]],["option",4]],[[["i128",15]],["option",4]],[[["i16",15]],["option",4]],[[["i32",15]],["option",4]],[[["i64",15]],["option",4]],[[["i8",15]],["option",4]],[[["isize",15]],["option",4]],[[["u128",15]],["option",4]],[[["u16",15]],["option",4]],[[["u32",15]],["option",4]],[[["u64",15]],["option",4]],[[["u8",15]],["option",4]],[[["usize",15]],["option",4]],[[],[["f32",15],["option",4,["f32"]]]],[[],[["option",4,["f64"]],["f64",15]]],[[],[["i128",15],["option",4,["i128"]]]],[[],[["i16",15],["option",4,["i16"]]]],[[],[["i32",15],["option",4,["i32"]]]],[[],[["option",4,["i64"]],["i64",15]]],[[],[["i8",15],["option",4,["i8"]]]],[[],[["option",4,["isize"]],["isize",15]]],[[],[["option",4,["u128"]],["u128",15]]],[[],[["u16",15],["option",4,["u16"]]]],[[],[["u32",15],["option",4,["u32"]]]],[[],[["option",4,["u64"]],["u64",15]]],[[],[["option",4,["u8"]],["u8",15]]],[[],[["usize",15],["option",4,["usize"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["fpcategory",4]],[[],["fpcategory",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[],["bool",15]],[[],["bool",15]],[[],["one",8]],[[]],[[]],[[]],[[],["zero",8]],[[]],null,[[],["u32",15]],[[],["u32",15]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[["u32",15]]],[[]],[[]],[[]],[[],["u32",15]],[[["u32",15]]],[[["u32",15]]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[],["option",4]],[[["u32",15]],["option",4]],[[["u32",15]],["option",4]],[[],["option",4]],null,null,[[]],null,null,null,[[]],[[]],null,null,null,[[]],[[]],[[]],null,null,null,null,[[]],[[]],[[]],[[]],[[]],null,null,null,null,null,null,[[]],[[]],[[]],[[["u32",15]]],[[["u32",15]]],[[]],null,null,[[["one",8],["usize",15],["checkedmul",8],["clone",8]],[["one",8],["option",4],["checkedmul",8],["clone",8]]],[[["one",8],["usize",15],["mul",8],["clone",8]],[["one",8],["mul",8],["clone",8]]],[[]],null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["bool",15]],[[],["bool",15]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["i32",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],null,null,[[["signed",8]],["signed",8]],[[]],[[["signed",8]],["signed",8]],[[]],[[],["bool",15]],[[],["bool",15]],[[["signed",8]],["signed",8]],[[]]],"p":[[4,"FloatErrorKind"],[8,"Num"],[3,"ParseFloatError"],[8,"Bounded"],[8,"AsPrimitive"],[8,"NumCast"],[8,"FromPrimitive"],[8,"ToPrimitive"],[8,"FloatConst"],[8,"Float"],[8,"FloatCore"],[8,"One"],[8,"Zero"],[8,"PrimInt"],[8,"CheckedAdd"],[8,"CheckedDiv"],[8,"CheckedMul"],[8,"CheckedNeg"],[8,"CheckedRem"],[8,"CheckedShl"],[8,"CheckedShr"],[8,"CheckedSub"],[8,"Inv"],[8,"MulAdd"],[8,"MulAddAssign"],[8,"OverflowingAdd"],[8,"OverflowingMul"],[8,"OverflowingSub"],[8,"Saturating"],[8,"SaturatingAdd"],[8,"SaturatingMul"],[8,"SaturatingSub"],[8,"WrappingAdd"],[8,"WrappingMul"],[8,"WrappingNeg"],[8,"WrappingShl"],[8,"WrappingShr"],[8,"WrappingSub"],[8,"Pow"],[8,"Real"],[8,"Signed"]]},\
"time":{"doc":"Feature flags","t":[12,13,13,18,3,13,3,13,13,18,3,13,13,13,18,18,18,18,18,18,18,18,13,13,13,4,18,13,13,3,3,6,18,13,13,13,13,3,13,18,18,3,18,13,4,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,13,3,13,3,13,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,8,8,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,5,5,5,5],"n":["0","April","August","DAY","Date","December","Duration","February","Friday","HOUR","Instant","January","July","June","MAX","MAX","MICROSECOND","MIDNIGHT","MILLISECOND","MIN","MIN","MINUTE","March","May","Monday","Month","NANOSECOND","November","October","OffsetDateTime","PrimitiveDateTime","Result","SECOND","Saturday","September","Sunday","Thursday","Time","Tuesday","UNIX_EPOCH","UTC","UtcOffset","WEEK","Wednesday","Weekday","ZERO","abs","add","add","add","add","add","add","add","add","add","add","add","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","add_assign","as_hms","as_hms","as_hms","as_hms_micro","as_hms_micro","as_hms_milli","as_hms_milli","as_hms_nano","as_hms_nano","as_ref","as_seconds_f32","as_seconds_f64","assume_offset","assume_utc","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","checked_add","checked_add","checked_div","checked_mul","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","date","date","day","day","day","days","default","div","div","div","div","div","div","div","div","div","div","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","div_assign","elapsed","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","error","ext","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from_calendar_date","from_hms","from_hms","from_hms_micro","from_hms_milli","from_hms_nano","from_iso_week_date","from_julian_day","from_ordinal_date","from_unix_timestamp","from_unix_timestamp_nanos","from_whole_seconds","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour","hour","hour","hours","into","into","into","into","into","into","into","into","into","into_inner","is_negative","is_negative","is_positive","is_positive","is_utc","is_zero","iso_week","iso_week","iso_week","microsecond","microsecond","microsecond","microseconds","midnight","millisecond","millisecond","millisecond","milliseconds","minute","minute","minute","minutes","minutes_past_hour","monday_based_week","monday_based_week","monday_based_week","month","month","month","mul","mul","mul","mul","mul","mul","mul","mul","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","mul_assign","nanosecond","nanosecond","nanosecond","nanoseconds","ne","ne","ne","ne","ne","ne","neg","neg","new","new","next","next","next_day","now","now_utc","number_days_from_monday","number_days_from_sunday","number_from_monday","number_from_sunday","offset","ordinal","ordinal","ordinal","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","previous","previous","previous_day","replace_date","replace_date","replace_date_time","replace_offset","replace_time","replace_time","saturating_add","saturating_mul","saturating_sub","second","second","second","seconds","seconds_f32","seconds_f64","seconds_past_minute","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","sub_assign","subsec_microseconds","subsec_milliseconds","subsec_nanoseconds","sum","sum","sunday_based_week","sunday_based_week","sunday_based_week","time","time","time_fn","to_calendar_date","to_calendar_date","to_calendar_date","to_hms","to_hms_micro","to_hms_milli","to_hms_nano","to_iso_week_date","to_iso_week_date","to_iso_week_date","to_julian_day","to_julian_day","to_julian_day","to_offset","to_ordinal_date","to_ordinal_date","to_ordinal_date","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","unix_timestamp","unix_timestamp_nanos","util","weekday","weekday","weekday","weeks","whole_days","whole_hours","whole_hours","whole_microseconds","whole_milliseconds","whole_minutes","whole_minutes","whole_nanoseconds","whole_seconds","whole_seconds","whole_weeks","with_hms","with_hms_micro","with_hms_milli","with_hms_nano","with_time","year","year","year","ComponentRange","ComponentRange","ConversionRange","ConversionRange","DifferentVariant","DifferentVariant","Error","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","hash","into","into","into","into","name","ne","source","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","0","0","0","NumericalDuration","NumericalStdDuration","days","hours","microseconds","milliseconds","minutes","nanoseconds","seconds","std_days","std_hours","std_microseconds","std_milliseconds","std_minutes","std_nanoseconds","std_seconds","std_weeks","weeks","days_in_year","days_in_year_month","is_leap_year","weeks_in_year"],"q":["timetime::error","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","time::error::Error","","","time::ext","","","","","","","","","","","","","","","","","","time::util","","",""],"d":["","","","Equivalent to <code>1.days()</code>.","Date in the proleptic Gregorian calendar.","","A span of time with nanosecond precision.","","","Equivalent to <code>1.hours()</code>.","A measurement of a monotonically non-decreasing clock. …","","","","The maximum valid <code>Date</code>.","The maximum possible duration. Adding any positive …","Equivalent to <code>1.microseconds()</code>.","Create a <code>Time</code> that is exactly midnight.","Equivalent to <code>1.milliseconds()</code>.","The minimum valid <code>Date</code>.","The minimum possible duration. Adding any negative …","Equivalent to <code>1.minutes()</code>.","","","","Months of the year.","Equivalent to <code>1.nanoseconds()</code>.","","","A <code>PrimitiveDateTime</code> with a <code>UtcOffset</code>.","Combined date and time.","An alias for <code>std::result::Result</code> with a generic error from …","Equivalent to <code>1.seconds()</code>.","","","","","The clock time within a given date. Nanosecond precision.","","Midnight, 1 January, 1970 (UTC).","A <code>UtcOffset</code> that is UTC.","An offset from UTC.","Equivalent to <code>1.weeks()</code>.","","Days of the week.","Equivalent to <code>0.seconds()</code>.","Get the absolute value of the duration.","","","","","","","","","","Add the sub-day time of the <code>Duration</code> to the <code>Time</code>. Wraps on …","Add the sub-day time of the <code>std::time::Duration</code> to the <code>Time</code>…","","","","","","","","","","","","","Get the clock hour, minute, and second.","Get the clock hour, minute, and second.","Obtain the UTC offset as its hours, minutes, and seconds. …","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the clock hour, minute, second, and nanosecond.","","Get the number of fractional seconds in the duration.","Get the number of fractional seconds in the duration.","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","Assuming that the existing <code>PrimitiveDateTime</code> represents a …","","","","","","","","","","","","","","","","","","","","Computes <code>self + rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self + duration</code> if <code>t</code> …","Computes <code>self / rhs</code>, returning <code>None</code> if <code>rhs == 0</code> or if the …","Computes <code>self * rhs</code>, returning <code>None</code> if an overflow …","Computes <code>self - rhs</code>, returning <code>None</code> if an overflow …","Returns <code>Some(t)</code> where <code>t</code> is the time <code>self - duration</code> if <code>t</code> …","","","","","","","","","","","","","","","","","","","","","","","","","","Get the <code>Date</code> in the stored offset.","Get the <code>Date</code> component of the <code>PrimitiveDateTime</code>.","Get the day of the month.","Get the day of the date in the stored offset.","Get the day of the date.","Create a new <code>Duration</code> with the given number of days. …","","","","","","","","","","","","","","","","","","","","Returns the amount of time elapsed since this instant was …","","","","","","","","","","","","","Various error types returned by methods in the time crate.","Extension traits.","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempt to create a <code>Date</code> from the year, month, and day.","Attempt to create a <code>Time</code> from the hour, minute, and second.","Create a <code>UtcOffset</code> representing an offset by the number of …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Time</code> from the hour, minute, second, …","Attempt to create a <code>Date</code> from the ISO year, week, and …","Create a <code>Date</code> from the Julian day.","Attempt to create a <code>Date</code> from the year and ordinal day …","Create an <code>OffsetDateTime</code> from the provided Unix timestamp. …","Construct an <code>OffsetDateTime</code> from the provided Unix …","Create a <code>UtcOffset</code> representing an offset by the number of …","","","","","","","","","","Get the clock hour in the stored offset.","Get the clock hour.","Get the clock hour.","Create a new <code>Duration</code> with the given number of hours. …","","","","","","","","","","Obtain the inner <code>std::time::Instant</code>.","Check if a duration is negative.","Check if the offset is negative, or west of UTC.","Check if a duration is positive.","Check if the offset is positive, or east of UTC.","Check if the offset is exactly UTC.","Check if a duration is exactly zero.","Get the ISO week number.","Get the ISO week number of the date in the stored offset.","Get the ISO week number.","Get the microseconds within the second in the stored …","Get the microseconds within the second.","Get the microseconds within the second.","Create a new <code>Duration</code> with the given number of …","Create a <code>PrimitiveDateTime</code> using the existing date. The …","Get the milliseconds within the second in the stored …","Get the milliseconds within the second.","Get the milliseconds within the second.","Create a new <code>Duration</code> with the given number of …","Get the minute within the hour in the stored offset.","Get the minute within the hour.","Get the minute within the hour.","Create a new <code>Duration</code> with the given number of minutes. …","Obtain the number of minutes past the hour the offset is …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the month.","Get the month of the date in the stored offset.","Get the month of the date.","","","","","","","","","","","","","","","","","Get the nanoseconds within the second in the stored offset.","Get the nanoseconds within the second.","Get the nanoseconds within the second.","Create a new <code>Duration</code> with the given number of nanoseconds.","","","","","","","","","Create a new <code>Duration</code> with the provided seconds and …","Create a new <code>PrimitiveDateTime</code> from the provided <code>Date</code> and …","Get the next month.","Get the next weekday.","Get the next calendar date.","Returns an <code>Instant</code> corresponding to “now”.","Create a new <code>OffsetDateTime</code> with the current date and time …","Get the zero-indexed number of days from Monday.","Get the zero-indexed number of days from Sunday.","Get the one-indexed number of days from Monday.","Get the one-indexed number of days from Sunday.","Get the <code>UtcOffset</code>.","Get the day of the year.","Get the day of the year of the date in the stored offset.","Get the day of the year.","","","","","","","","","","","Get the previous month.","Get the previous weekday.","Get the previous calendar date.","Replace the date, which is assumed to be in the stored …","Replace the date, preserving the time.","Replace the date and time, which are assumed to be in the …","Replace the offset. The date and time components remain …","Replace the time, which is assumed to be in the stored …","Replace the time, preserving the date.","Computes <code>self + rhs</code>, saturating if an overflow occurred.","Computes <code>self * rhs</code>, saturating if an overflow occurred.","Computes <code>self - rhs</code>, saturating if an overflow occurred.","Get the second within the minute in the stored offset.","Get the second within the minute.","Get the second within the minute.","Create a new <code>Duration</code> with the given number of seconds.","Creates a new <code>Duration</code> from the specified number of …","Creates a new <code>Duration</code> from the specified number of …","Obtain the number of seconds past the minute the offset is …","","","","","","","","","","","","","","","","Subtract two <code>Time</code>s, returning the <code>Duration</code> between. This …","Subtract the sub-day time of the <code>std::time::Duration</code> from …","Subtract the sub-day time of the <code>Duration</code> from the <code>Time</code>. …","","","","","","","","","","","","","Get the number of microseconds past the number of whole …","Get the number of milliseconds past the number of whole …","Get the number of nanoseconds past the number of whole …","","","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the week number where week 1 begins on the first …","Get the <code>Time</code> in the stored offset.","Get the <code>Time</code> component of the <code>PrimitiveDateTime</code>.","Runs a closure, returning the duration of time it took to …","Get the year, month, and day.","Get the year, month, and day.","Get the year, month, and day.","Get the clock hour, minute, and second.","Get the clock hour, minute, second, and microsecond.","Get the clock hour, minute, second, and millisecond.","Get the clock hour, minute, second, and nanosecond.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the ISO 8601 year, week number, and weekday.","Get the Julian day for the date.","Get the Julian day for the date. The time is not taken …","Get the Julian day for the date. The time is not taken …","Convert the <code>OffsetDateTime</code> from the current <code>UtcOffset</code> to …","Get the year and ordinal day number.","Get the year and ordinal day number.","Get the year and ordinal day number.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Get the Unix timestamp.","Get the Unix timestamp in nanoseconds.","Utility functions.","Get the weekday.","Get the weekday of the date in the stored offset.","Get the weekday.","Create a new <code>Duration</code> with the given number of weeks. …","Get the number of whole days in the duration.","Get the number of whole hours in the duration.","Obtain the number of whole hours the offset is from UTC. A …","Get the number of whole microseconds in the duration.","Get the number of whole milliseconds in the duration.","Get the number of whole minutes in the duration.","Obtain the number of whole minutes the offset is from UTC. …","Get the number of nanoseconds in the duration.","Get the number of whole seconds in the duration.","Obtain the number of whole seconds the offset is from UTC. …","Get the number of whole weeks in the duration.","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Attempt to create a <code>PrimitiveDateTime</code> using the existing …","Create a <code>PrimitiveDateTime</code> using the existing date and the …","Get the year of the date.","Get the year of the date in the stored offset.","Get the year of the date.","An error type indicating that a component provided to a …","","An error type indicating that a conversion failed because …","","An error type indicating that a <code>TryFrom</code> call failed …","","A unified error type for anything returned by a method in …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Obtain the name of the component whose value was out of …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Create <code>Duration</code>s from numeric literals.","Create <code>std::time::Duration</code>s from numeric literals.","Create a <code>Duration</code> from the number of days.","Create a <code>Duration</code> from the number of hours.","Create a <code>Duration</code> from the number of microseconds.","Create a <code>Duration</code> from the number of milliseconds.","Create a <code>Duration</code> from the number of minutes.","Create a <code>Duration</code> from the number of nanoseconds.","Create a <code>Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of days.","Create a <code>std::time::Duration</code> from the number of hours.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of minutes.","Create a <code>std::time::Duration</code> from the number of …","Create a <code>std::time::Duration</code> from the number of seconds.","Create a <code>std::time::Duration</code> from the number of weeks.","Create a <code>Duration</code> from the number of weeks.","Get the number of calendar days in a given year.","Get the number of days in the month of a given year.","Returns if the provided year is a leap year in the …","Get the number of weeks in the ISO year."],"i":[1,2,2,3,0,2,0,2,4,3,0,2,2,2,5,3,3,6,3,5,3,3,2,2,4,0,3,2,2,0,0,0,3,4,2,4,4,0,4,7,8,0,3,4,0,3,3,5,5,3,3,1,1,7,9,9,6,6,5,5,3,3,1,1,7,7,9,9,6,6,9,6,8,9,6,9,6,9,6,1,3,3,9,9,5,3,1,1,2,7,9,6,8,4,5,3,1,2,7,9,6,8,4,3,1,3,3,3,1,5,3,1,2,7,9,6,8,4,5,3,1,2,7,9,6,8,4,5,3,1,7,9,6,8,7,9,5,7,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,5,3,3,1,1,2,7,7,9,6,8,4,0,0,5,5,3,1,2,2,7,7,9,9,6,6,8,8,4,4,5,3,1,1,2,7,7,9,6,8,4,5,6,8,6,6,6,5,5,5,7,7,8,5,3,1,2,7,9,6,8,4,7,9,6,3,5,3,1,2,7,9,6,8,4,1,3,8,3,8,8,3,5,7,9,7,9,6,3,5,7,9,6,3,7,9,6,3,8,5,7,9,5,7,9,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,7,9,6,3,5,3,1,9,6,8,3,8,3,9,2,4,5,1,7,4,4,4,4,7,5,7,9,5,3,3,1,1,7,7,9,6,8,2,4,5,7,9,7,7,7,9,3,3,3,7,9,6,3,3,3,8,5,5,5,3,3,1,1,1,1,7,7,7,9,9,9,6,6,6,5,5,3,3,1,1,7,7,9,9,6,6,3,3,3,3,3,5,7,9,7,9,3,5,7,9,7,7,7,7,5,7,9,5,7,9,7,5,7,9,5,3,1,2,7,9,6,8,4,5,2,7,9,6,8,4,5,3,3,1,2,2,7,9,6,8,4,5,3,1,2,7,9,6,8,4,5,3,1,2,7,9,6,8,4,7,7,0,5,7,9,3,3,3,8,3,3,3,8,3,3,8,3,5,5,5,5,5,5,7,9,0,10,0,10,0,10,0,11,12,13,10,11,12,13,10,11,12,13,11,12,13,11,12,13,11,11,12,12,13,13,10,10,11,12,13,10,10,10,10,11,11,12,13,10,11,11,10,11,12,13,11,12,13,10,11,11,12,12,13,13,10,11,12,13,10,11,12,13,10,14,15,16,0,0,17,17,17,17,17,17,17,18,18,18,18,18,18,18,18,17,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[]],[[["stdduration",3]]],[[["duration",3]]],[[]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stdinstant",3]],[[],["f32",15]],[[],["f64",15]],[[["utcoffset",3]],["offsetdatetime",3]],[[],["offsetdatetime",3]],[[]],[[]],[[],["stdinstant",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["option",4]],[[["duration",3]],["option",4]],[[["i32",15]],["option",4]],[[["i32",15]],["option",4]],[[],["option",4]],[[["duration",3]],["option",4]],[[],["date",3]],[[],["duration",3]],[[],["instant",3]],[[],["month",4]],[[],["offsetdatetime",3]],[[],["primitivedatetime",3]],[[],["time",3]],[[],["utcoffset",3]],[[],["weekday",4]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[["date",3]],["ordering",4]],[[["duration",3]],["ordering",4]],[[["instant",3]],["ordering",4]],[[],["ordering",4]],[[["primitivedatetime",3]],["ordering",4]],[[["time",3]],["ordering",4]],[[["utcoffset",3]],["ordering",4]],[[],["date",3]],[[],["date",3]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["i64",15]]],[[],["duration",3]],[[["i8",15]]],[[["stdduration",3]]],[[["i16",15]]],[[["i32",15]]],[[["u8",15]]],[[["u16",15]]],[[["u32",15]]],[[["f32",15]]],[[]],[[["f64",15]]],[[["i8",15]]],[[["f32",15]]],[[["i32",15]]],[[["u32",15]]],[[["f64",15]]],[[["u16",15]]],[[["u8",15]]],[[["i16",15]]],[[],["duration",3]],[[["date",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["stdduration",3]],["bool",15]],[[["stdinstant",3]],["bool",15]],[[["instant",3]],["bool",15]],[[["month",4]],["bool",15]],[[["systemtime",3]],["bool",15]],[[],["bool",15]],[[["primitivedatetime",3]],["bool",15]],[[["time",3]],["bool",15]],[[["utcoffset",3]],["bool",15]],[[["weekday",4]],["bool",15]],null,null,[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[["stdinstant",3]]],[[]],[[]],[[["systemtime",3]]],[[]],[[]],[[]],[[]],[[["i32",15],["u8",15],["month",4]],[["result",4,["componentrange"]],["componentrange",3]]],[[["u8",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["i8",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["u8",15],["u32",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["u16",15],["u8",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["u8",15],["u32",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["i32",15],["u8",15],["weekday",4]],[["result",4,["componentrange"]],["componentrange",3]]],[[["i32",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["u16",15],["i32",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["i64",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["i128",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[["i32",15]],[["result",4,["componentrange"]],["componentrange",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["i64",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["stdinstant",3]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["bool",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["i64",15]]],[[],["primitivedatetime",3]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[["i64",15]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["i64",15]]],[[],["i8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["month",4]],[[],["month",4]],[[],["month",4]],[[["i16",15]]],[[["i8",15]]],[[["f64",15]]],[[["f32",15]]],[[["u32",15]]],[[["u16",15]]],[[["u8",15]]],[[["i32",15]]],[[["u16",15]]],[[["f32",15]]],[[["f64",15]]],[[["i16",15]]],[[["i8",15]]],[[["u32",15]]],[[["i32",15]]],[[["u8",15]]],[[],["u32",15]],[[],["u32",15]],[[],["u32",15]],[[["i64",15]]],[[["date",3]],["bool",15]],[[["duration",3]],["bool",15]],[[["instant",3]],["bool",15]],[[["primitivedatetime",3]],["bool",15]],[[["time",3]],["bool",15]],[[["utcoffset",3]],["bool",15]],[[]],[[]],[[["i32",15],["i64",15]]],[[["date",3],["time",3]]],[[]],[[]],[[],["option",4]],[[]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["utcoffset",3]],[[],["u16",15]],[[],["u16",15]],[[],["u16",15]],[[["date",3]],[["option",4,["ordering"]],["ordering",4]]],[[["stdduration",3]],[["option",4,["ordering"]],["ordering",4]]],[[["duration",3]],[["option",4,["ordering"]],["ordering",4]]],[[["stdinstant",3]],[["option",4,["ordering"]],["ordering",4]]],[[["instant",3]],[["option",4,["ordering"]],["ordering",4]]],[[["systemtime",3]],[["option",4,["ordering"]],["ordering",4]]],[[],[["option",4,["ordering"]],["ordering",4]]],[[["primitivedatetime",3]],[["option",4,["ordering"]],["ordering",4]]],[[["time",3]],[["option",4,["ordering"]],["ordering",4]]],[[["utcoffset",3]],[["option",4,["ordering"]],["ordering",4]]],[[]],[[]],[[],["option",4]],[[["date",3]]],[[["date",3]]],[[["primitivedatetime",3]]],[[["utcoffset",3]]],[[["time",3]]],[[["time",3]]],[[]],[[["i32",15]]],[[]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[["i64",15]]],[[["f32",15]]],[[["f64",15]]],[[],["i8",15]],[[["stdduration",3]]],[[["duration",3]]],[[]],[[]],[[["stdduration",3]]],[[]],[[["stdinstant",3]]],[[["duration",3]]],[[["stdduration",3]]],[[]],[[["systemtime",3]]],[[]],[[]],[[["duration",3]]],[[["stdduration",3]]],[[]],[[["stdduration",3]]],[[["duration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[["stdduration",3]]],[[["stdduration",3]]],[[["duration",3]]],[[],["i32",15]],[[],["i16",15]],[[],["i32",15]],[[["iterator",8]]],[[["iterator",8]]],[[],["u8",15]],[[],["u8",15]],[[],["u8",15]],[[],["time",3]],[[],["time",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],[[["utcoffset",3]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[["stdduration",3]],[["result",4,["conversionrange"]],["conversionrange",3]]],[[],["result",4]],[[],["result",4]],[[["u8",15]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["i64",15]],[[],["i128",15]],null,[[],["weekday",4]],[[],["weekday",4]],[[],["weekday",4]],[[["i64",15]]],[[],["i64",15]],[[],["i64",15]],[[],["i8",15]],[[],["i128",15]],[[],["i128",15]],[[],["i64",15]],[[],["i16",15]],[[],["i128",15]],[[],["i64",15]],[[],["i32",15]],[[],["i64",15]],[[["u8",15]],[["result",4,["primitivedatetime","componentrange"]],["componentrange",3],["primitivedatetime",3]]],[[["u8",15],["u32",15]],[["result",4,["primitivedatetime","componentrange"]],["componentrange",3],["primitivedatetime",3]]],[[["u16",15],["u8",15]],[["result",4,["primitivedatetime","componentrange"]],["componentrange",3],["primitivedatetime",3]]],[[["u8",15],["u32",15]],[["result",4,["primitivedatetime","componentrange"]],["componentrange",3],["primitivedatetime",3]]],[[["time",3]],["primitivedatetime",3]],[[],["i32",15]],[[],["i32",15]],[[],["i32",15]],null,null,null,null,null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["componentrange",3]],[[],["conversionrange",3]],[[],["differentvariant",3]],[[]],[[]],[[]],[[["componentrange",3]],["bool",15]],[[["conversionrange",3]],["bool",15]],[[["differentvariant",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[["componentrange",3]]],[[["differentvariant",3]]],[[["conversionrange",3]]],[[]],[[]],[[]],[[]],[[]],[[],["str",15]],[[["componentrange",3]],["bool",15]],[[],[["option",4,["error"]],["error",8]]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[["error",4]],["result",4]],[[],["result",4]],[[["error",4]],["result",4]],[[],["result",4]],[[["error",4]],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],null,null,null,null,null,[[],["duration",3]],[[],["duration",3]],[[],["duration",3]],[[],["duration",3]],[[],["duration",3]],[[],["duration",3]],[[],["duration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["stdduration",3]],[[],["duration",3]],[[["i32",15]],["u16",15]],[[["i32",15],["month",4]],["u8",15]],[[["i32",15]],["bool",15]],[[["i32",15]],["u8",15]]],"p":[[3,"Instant"],[4,"Month"],[3,"Duration"],[4,"Weekday"],[3,"Date"],[3,"Time"],[3,"OffsetDateTime"],[3,"UtcOffset"],[3,"PrimitiveDateTime"],[4,"Error"],[3,"ComponentRange"],[3,"ConversionRange"],[3,"DifferentVariant"],[13,"ConversionRange"],[13,"ComponentRange"],[13,"DifferentVariant"],[8,"NumericalDuration"],[8,"NumericalStdDuration"]],"a":{"from_julian_date":[208],"iso_weekday_number":[302]}},\
"yasna":{"doc":"A library for reading and writing ASN.1 data.","t":[3,4,6,13,8,4,3,3,3,13,13,13,8,3,3,3,13,13,13,13,13,4,13,13,13,3,4,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,5,11,5,10,5,5,5,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,11,11,11,11,11,11,5,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,0,11,11,11,11,11,11,11,5,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17],"n":["ASN1Error","ASN1ErrorKind","ASN1Result","Application","BERDecodable","BERMode","BERReader","BERReaderSeq","BERReaderSet","Ber","Constructed","ContextSpecific","DEREncodable","DERWriter","DERWriterSeq","DERWriterSet","Der","Eof","Extra","IntegerOverflow","Invalid","PCBit","Primitive","Private","StackOverflow","Tag","TagClass","Universal","application","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","collect_sequence_of","collect_set_of","construct_der","construct_der_seq","context","decode_ber","decode_ber","decode_ber_general","decode_der","encode_der","encode_der","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","kind","lookahead_tag","mode","mode","mode","models","ne","ne","new","next","next","next","next","parse_ber","parse_ber_general","parse_der","partial_cmp","partial_cmp","partial_cmp","partial_cmp","private","read_bigint","read_biguint","read_bitvec","read_bitvec_bytes","read_bmp_string","read_bool","read_bytes","read_default","read_default","read_der","read_enum","read_generalized_time","read_i16","read_i32","read_i64","read_i8","read_ia5_string","read_null","read_numeric_string","read_oid","read_optional","read_optional","read_printable_string","read_sequence","read_sequence_of","read_set","read_set_of","read_tagged","read_tagged_der","read_tagged_implicit","read_u16","read_u32","read_u64","read_u8","read_utctime","read_utf8string","read_visible_string","read_with_buffer","read_with_buffer","tag_class","tag_number","tags","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_construct_der","try_construct_der_seq","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","write_bigint","write_biguint","write_bitvec","write_bitvec_bytes","write_bmp_string","write_bool","write_bytes","write_der","write_enum","write_generalized_time","write_i16","write_i32","write_i64","write_i8","write_ia5_string","write_null","write_numeric_string","write_oid","write_printable_string","write_sequence","write_sequence_of","write_set","write_set_of","write_tagged","write_tagged_der","write_tagged_implicit","write_u16","write_u32","write_u64","write_u8","write_utctime","write_utf8_string","write_utf8string","write_visible_string","GeneralizedTime","ObjectIdentifier","ParseOidError","TaggedDerValue","UTCTime","as_bytes","as_ref","as_str","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","components","components_mut","datetime","datetime","decode_ber","decode_ber","decode_ber","decode_ber","encode_der","encode_der","encode_der","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from_datetime","from_datetime","from_datetime_and_sub_nano","from_datetime_and_sub_nano_opt","from_datetime_opt","from_datetime_opt","from_octetstring","from_slice","from_str","from_tag_and_bytes","from_tag_pc_and_bytes","hash","hash","hash","hash","into","into","into","into","into","into_components","ne","ne","ne","ne","new","parse","parse","parse_with_offset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","pcbit","sub_nano","tag","to_bytes","to_bytes","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","TAG_BITSTRING","TAG_BMPSTRING","TAG_BOOLEAN","TAG_DATE","TAG_DATE_TIME","TAG_DURATION","TAG_EMBEDDED_PDV","TAG_ENUM","TAG_EOC","TAG_EXT","TAG_GENERALIZEDTIME","TAG_GENERALSTRING","TAG_GRAPHICSTRING","TAG_IA5STRING","TAG_INTEGER","TAG_NULL","TAG_NUMERICSTRING","TAG_OBJECT_DESCRIPTOR","TAG_OCTETSTRING","TAG_OID","TAG_OID_INTL_RESID","TAG_PRINTABLESTRING","TAG_REAL","TAG_RELATIVE_OID","TAG_RELATIVE_OID_INTL_RESID","TAG_SEQUENCE","TAG_SET","TAG_TELETEXSTRING","TAG_TIME","TAG_TIME_OF_DAY","TAG_UNIVERSALSTRING","TAG_UTCTIME","TAG_UTF8STRING","TAG_VIDEOTEXSTRING","TAG_VISIBLESTRING"],"q":["yasnayasna::models","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","yasna::tags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["","","","The APPLICATION tag class","Types decodable in BER.","Used by <code>BERReader</code> to determine whether or not to enforce …","A reader object for BER/DER-encoded ASN.1 data.","A reader object for a sequence of BER/DER-encoded ASN.1 …","A reader object for a set of BER/DER-encoded ASN.1 data.","Use BER (Basic Encoding Rules).","The bit’s value is “Constructed”","The CONTEXT-SPECIFIC tag class","Types encodable in DER.","A writer object that accepts an ASN.1 value.","A writer object that accepts ASN.1 values.","A writer object that accepts ASN.1 values.","Use DER (Distinguished Encoding Rules).","","","","","A value of the ASN.1 primitive/constructed (“P/C”) bit.","The bit’s value is “Primitive”","The PRIVATE tag class","","An ASN.1 tag.","An ASN.1 tag class, used in <code>Tag</code>.","The UNIVERSAL tag class","Constructs an APPLICATION tag, namely [APPLICATION n].","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Collects an ASN.1 SEQUENCE OF value.","Collects an ASN.1 SET OF value.","Constructs DER-encoded data as <code>Vec&lt;u8&gt;</code>.","Constructs DER-encoded sequence of data as <code>Vec&lt;u8&gt;</code>.","Constructs a context specific tag, namely [n].","Reads an ASN.1 value from <code>&amp;[u8]</code>.","Reads an ASN.1 value from <code>BERReader</code> and converts it to <code>Self</code>…","Decodes DER/BER-encoded data.","Reads an ASN.1 value from <code>&amp;[u8]</code>.","Encodes a value to DER-encoded ASN.1 data.","Writes the value as an DER-encoded ASN.1 value.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Lookaheads the tag in the next value. Used to parse CHOICE …","Tells which format we are parsing, BER or DER.","Tells which format we are parsing, BER or DER.","Tells which format we are parsing, BER or DER.","Provides datatypes which correspond to ASN.1 types.","","","","Generates a new <code>DERWriter</code>.","Generates a new <code>DERWriter</code>.","Generates a new <code>BERReader</code>.","Generates a new <code>BERReader</code>.","Parses BER-encoded data.","Parses DER/BER-encoded data.","Parses DER-encoded data.","","","","","Constructs a PRIVATE tag, namely [PRIVATE n].","Reads an ASN.1 INTEGER value as <code>BigInt</code>.","Reads an ASN.1 INTEGER value as <code>BigUint</code>.","Reads an ASN.1 BITSTRING value as <code>BitVec</code>.","Reads an ASN.1 BITSTRING value as <code>(Vec&lt;u8&gt;, usize)</code>.","Reads an ASN.1 BMPString.","Reads an ASN.1 BOOLEAN value as <code>bool</code>.","Reads an ASN.1 OCTETSTRING value as <code>Vec&lt;u8&gt;</code>.","Similar to <code>read_optional</code>, but uses <code>default</code> if it fails.","Similar to <code>read_optional</code>, but uses <code>default</code> if it fails.","Reads a DER object as raw bytes. Tag and length are …","Reads an ASN.1 ENUMERATED value as <code>i64</code>.","Reads an ASN.1 GeneralizedTime.","Reads an ASN.1 INTEGER value as <code>i16</code>.","Reads an ASN.1 INTEGER value as <code>i32</code>.","Reads an ASN.1 INTEGER value as <code>i64</code>.","Reads an ASN.1 INTEGER value as <code>i8</code>.","Reads an ASN.1 IA5String.","Reads the ASN.1 NULL value.","Reads an ASN.1 NumericString.","Reads an ASN.1 object identifier.","Tries to read an ASN.1 value. If it fails at the first tag,","If there is a set element with a tag in <code>tag_hint</code>, reads an …","Reads an ASN.1 PrintableString.","Reads an ASN.1 SEQUENCE value.","Reads an ASN.1 SEQUENCE OF value.","Reads an ASN.1 SET value.","Reads an ASN.1 SET OF value.","Reads a (explicitly) tagged value.","Read an arbitrary (tag, value) pair as a TaggedDerValue. …","Reads an implicitly tagged value.","Reads an ASN.1 INTEGER value as <code>u16</code>.","Reads an ASN.1 INTEGER value as <code>u32</code>.","Reads an ASN.1 INTEGER value as <code>u64</code>.","Reads an ASN.1 INTEGER value as <code>u8</code>.","Reads an ASN.1 UTCTime.","Reads an ASN.1 UTF8String.","Reads an ASN.1 VisibleString.","","","The tag class","The tag number","Provides universal tag constants.","","","","","","","","Tries to construct DER-encoded data as <code>Vec&lt;u8&gt;</code>.","Tries to construct a DER-encoded sequence of data as …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Writes <code>BigInt</code> as an ASN.1 INTEGER value.","Writes <code>BigUint</code> as an ASN.1 INTEGER value.","Writes <code>BitVec</code> as an ASN.1 BITSTRING value.","Writes <code>&amp;[u8]</code> and <code>usize</code> as an ASN.1 BITSTRING value.","Writes <code>&amp;str</code> as an ASN.1 BMPString value.","Writes <code>bool</code> as an ASN.1 BOOLEAN value.","Writes <code>&amp;[u8]</code> as an ASN.1 OCTETSTRING value.","Writes <code>&amp;[u8]</code> into the DER output buffer directly. Properly …","Writes <code>i64</code> as an ASN.1 ENUMERATED value.","Writes an ASN.1 GeneralizedTime.","Writes <code>i16</code> as an ASN.1 INTEGER value.","Writes <code>i32</code> as an ASN.1 INTEGER value.","Writes <code>i64</code> as an ASN.1 INTEGER value.","Writes <code>i8</code> as an ASN.1 INTEGER value.","Writes <code>&amp;str</code> as an ASN.1 IA5String value.","Writes the ASN.1 NULL value.","Writes an ASN.1 NumericString.","Writes an ASN.1 object identifier.","Writes an ASN.1 PrintableString.","Writes ASN.1 SEQUENCE.","Writes ASN.1 SEQUENCE OF.","Writes ASN.1 SET.","Writes ASN.1 SET OF.","Writes an (explicitly) tagged value.","Writes the arbitrary tagged DER value in <code>der</code>.","Writes an implicitly tagged value.","Writes <code>u16</code> as an ASN.1 INTEGER value.","Writes <code>u32</code> as an ASN.1 INTEGER value.","Writes <code>u64</code> as an ASN.1 INTEGER value.","Writes <code>u8</code> as an ASN.1 INTEGER value.","Writes an ASN.1 UTCTime.","Writes <code>&amp;str</code> as an ASN.1 UTF8String value.","Writes an ASN.1 UTF8String.","Writes an ASN.1 VisibleString.","Date and time between 0000-01-01T00:00:00Z and …","A type that represents object identifiers.","An error indicating failure to parse an Object identifier","Container for a tag and arbitrary DER value.","Date and time between 1950-01-01T00:00:00Z and …","If the value is something that contains raw bytes, returns …","","If the value is something string-like, returns it as …","","","","","","","","","","","","","","","","","","","","","","","","","Borrows its internal vector of components.","Mutably borrows its internal vector of components.","Returns the <code>OffsetDateTime</code> it represents.","Returns the <code>OffsetDateTime</code> it represents.","","","","","","","","","","","","","","","","","","","","","","","","","Constructs <code>UTCTime</code> from an <code>OffsetDateTime</code>.","Constructs <code>GeneralizedTime</code> from an <code>OffsetDateTime</code>.","Constructs <code>GeneralizedTime</code> from an <code>OffsetDateTime</code> and …","Constructs <code>GeneralizedTime</code> from an <code>OffsetDateTime</code> and …","Constructs <code>UTCTime</code> from an <code>OffsetDateTime</code>.","Constructs <code>GeneralizedTime</code> from an <code>OffsetDateTime</code>.","Constructs a new <code>TaggedDerValue</code> as an octet string","Constructs a new <code>ObjectIdentifier</code> from <code>&amp;[u64]</code>.","","Constructs a new <code>TaggedDerValue</code> from its tag and content","Constructs a new <code>TaggedDerValue</code> from its tag, …","","","","","","","","","","Extracts its internal vector of components.","","","","","Constructs a new <code>ObjectIdentifier</code> from <code>Vec&lt;u64&gt;</code>.","Parses ASN.1 string representation of UTCTime.","Parses ASN.1 string representation of GeneralizedTime.","Parses ASN.1 string representation of GeneralizedTime, …","","","","","Returns the primitive/constructed bit","Returns sub-nanoseconds digits of the datetime.","Returns the tag","Returns ASN.1 canonical representation of the datetime as …","Returns ASN.1 canonical representation of the datetime as …","","","","","","","","Returns ASN.1 canonical representation of the datetime as …","Returns ASN.1 canonical representation of the datetime as …","","","","","","","","","","","","","","","","Returns the value","A universal tag for BITSTRING.","A universal tag for BMPString.","A universal tag for BOOLEAN.","A universal tag for DATE.","A universal tag for DATE-TIME.","A universal tag for DURATION.","A universal tag for embedded-pdv types.","A universal tag for enumerated types.","A special tag representing “end of contents”.","A universal tag for external/instance-of types.","A universal tag for GeneralizedTime.","A universal tag for GeneralString.","A universal tag for GraphicString.","A universal tag for IA5String.","A universal tag for INTEGER.","A universal tag for NULL.","A universal tag for NumericString.","A universal tag for object descriptors.","A universal tag for OCTETSTRING.","A universal tag for object identifiers.","A universal tag for OID internationalized resource …","A universal tag for PrintableString.","A universal tag for REAL.","A universal tag for relative object identifiers.","A universal tag for relative OID internationalized …","A universal tag for SEQUENCE/SEQUENCE OF.","A universal tag for SET/SET OF.","A universal tag for TeletexString.","A universal tag for TIME.","A universal tag for TIME-OF-DAY.","A universal tag for UniversalString.","A universal tag for UTCTime.","A universal tag for UTF8String.","A universal tag for VideotexString.","A universal tag for VisibleString."],"i":[0,0,0,1,0,0,0,0,0,2,3,1,0,0,0,0,2,4,4,4,4,0,3,1,4,0,0,1,5,6,7,8,9,4,2,10,11,12,3,1,5,6,7,8,9,4,2,10,11,12,3,1,5,9,4,2,3,1,5,9,4,2,3,1,5,2,3,1,5,10,10,0,0,5,0,13,0,0,0,14,9,4,2,3,1,5,6,7,8,9,9,4,2,10,11,12,3,1,5,6,7,8,9,4,2,10,11,12,3,1,5,2,3,1,5,6,7,8,9,4,2,10,11,12,3,1,5,9,10,10,11,12,0,9,5,9,7,8,11,12,0,0,0,2,3,1,5,5,10,10,10,10,10,10,10,11,12,10,10,10,10,10,10,10,10,10,10,10,11,12,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,10,11,5,5,0,9,4,2,3,1,5,9,0,0,6,7,8,9,4,2,10,11,12,3,1,5,6,7,8,9,4,2,10,11,12,3,1,5,6,7,8,9,4,2,10,11,12,3,1,5,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,0,0,0,0,0,15,16,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,16,18,19,15,16,16,18,19,16,18,19,15,16,18,19,16,18,19,15,16,16,17,17,18,19,15,16,16,17,18,19,15,18,19,19,19,18,19,15,16,16,15,15,16,18,19,15,16,17,18,19,15,16,16,18,19,15,16,18,19,19,16,18,19,15,15,19,15,18,19,16,17,18,19,15,16,17,18,19,16,17,18,19,15,16,17,18,19,15,16,17,18,19,15,15,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"f":[null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,[[["u64",15]],["tag",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["asn1error",3]],[[],["asn1errorkind",4]],[[],["bermode",4]],[[],["pcbit",4]],[[],["tagclass",4]],[[],["tag",3]],[[]],[[]],[[]],[[]],[[]],[[]],[[["bermode",4]],["ordering",4]],[[["pcbit",4]],["ordering",4]],[[["tagclass",4]],["ordering",4]],[[["tag",3]],["ordering",4]],[[],[["vec",3],["asn1result",6,["vec"]]]],[[],[["vec",3],["asn1result",6,["vec"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[["u64",15]],["tag",3]],[[],[["asn1result",6],["berdecodable",8]]],[[["berreader",3]],["asn1result",6]],[[["bermode",4]],[["asn1result",6],["berdecodable",8]]],[[],[["asn1result",6],["berdecodable",8]]],[[],[["u8",15],["vec",3,["u8"]]]],[[["derwriter",3]]],[[["asn1error",3]],["bool",15]],[[["asn1errorkind",4]],["bool",15]],[[["bermode",4]],["bool",15]],[[["pcbit",4]],["bool",15]],[[["tagclass",4]],["bool",15]],[[["tag",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["asn1errorkind",4]],[[],[["asn1result",6,["tag"]],["tag",3]]],[[],["bermode",4]],[[],["bermode",4]],[[],["bermode",4]],null,[[["asn1error",3]],["bool",15]],[[["tag",3]],["bool",15]],[[["asn1errorkind",4]]],[[],["derwriter",3]],[[],["derwriter",3]],[[],["berreader",3]],[[],[["berreader",3],["asn1result",6,["berreader"]]]],[[],["asn1result",6]],[[["bermode",4]],["asn1result",6]],[[],["asn1result",6]],[[["bermode",4]],[["option",4,["ordering"]],["ordering",4]]],[[["pcbit",4]],[["option",4,["ordering"]],["ordering",4]]],[[["tagclass",4]],[["option",4,["ordering"]],["ordering",4]]],[[["tag",3]],[["option",4,["ordering"]],["ordering",4]]],[[["u64",15]],["tag",3]],[[],[["asn1result",6,["bigint"]],["bigint",3]]],[[],[["biguint",3],["asn1result",6,["biguint"]]]],[[],[["asn1result",6,["bitvec"]],["bitvec",3]]],[[],["asn1result",6]],[[],[["string",3],["asn1result",6,["string"]]]],[[],[["asn1result",6,["bool"]],["bool",15]]],[[],[["asn1result",6,["vec"]],["vec",3,["u8"]]]],[[],["asn1result",6]],[[],["asn1result",6]],[[],[["asn1result",6,["vec"]],["vec",3,["u8"]]]],[[],[["i64",15],["asn1result",6,["i64"]]]],[[],[["generalizedtime",3],["asn1result",6,["generalizedtime"]]]],[[],[["i16",15],["asn1result",6,["i16"]]]],[[],[["i32",15],["asn1result",6,["i32"]]]],[[],[["i64",15],["asn1result",6,["i64"]]]],[[],[["i8",15],["asn1result",6,["i8"]]]],[[],[["string",3],["asn1result",6,["string"]]]],[[],["asn1result",6]],[[],[["string",3],["asn1result",6,["string"]]]],[[],[["objectidentifier",3],["asn1result",6,["objectidentifier"]]]],[[],[["asn1result",6,["option"]],["option",4]]],[[],[["asn1result",6,["option"]],["option",4]]],[[],[["string",3],["asn1result",6,["string"]]]],[[],["asn1result",6]],[[],["asn1result",6]],[[],["asn1result",6]],[[],["asn1result",6]],[[["tag",3]],["asn1result",6]],[[],[["taggeddervalue",3],["asn1result",6,["taggeddervalue"]]]],[[["tag",3]],["asn1result",6]],[[],[["u16",15],["asn1result",6,["u16"]]]],[[],[["asn1result",6,["u32"]],["u32",15]]],[[],[["u64",15],["asn1result",6,["u64"]]]],[[],[["asn1result",6,["u8"]],["u8",15]]],[[],[["utctime",3],["asn1result",6,["utctime"]]]],[[],[["string",3],["asn1result",6,["string"]]]],[[],[["string",3],["asn1result",6,["string"]]]],[[],["asn1result",6]],[[],["asn1result",6]],null,null,null,[[]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],[["result",4,["vec"]],["vec",3,["u8"]]]],[[],[["result",4,["vec"]],["vec",3,["u8"]]]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[["bigint",3]]],[[["biguint",3]]],[[["bitvec",3]]],[[["usize",15]]],[[["str",15]]],[[["bool",15]]],[[]],[[]],[[["i64",15]]],[[["generalizedtime",3]]],[[["i16",15]]],[[["i32",15]]],[[["i64",15]]],[[["i8",15]]],[[["str",15]]],[[]],[[["str",15]]],[[["objectidentifier",3]]],[[["str",15]]],[[]],[[]],[[]],[[]],[[["tag",3]]],[[["taggeddervalue",3]]],[[["tag",3]]],[[["u16",15]]],[[["u32",15]]],[[["u64",15]]],[[["u8",15]]],[[["utctime",3]]],[[["str",15]]],[[["str",15]]],[[["str",15]]],null,null,null,null,null,[[],["option",4]],[[]],[[],[["option",4,["str"]],["str",15]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],["objectidentifier",3]],[[],["parseoiderror",3]],[[],["utctime",3]],[[],["generalizedtime",3]],[[],["taggeddervalue",3]],[[]],[[]],[[]],[[]],[[]],[[["objectidentifier",3]],["ordering",4]],[[["utctime",3]],["ordering",4]],[[["generalizedtime",3]],["ordering",4]],[[["taggeddervalue",3]],["ordering",4]],[[],["vec",3]],[[],["vec",3]],[[],["offsetdatetime",3]],[[],["offsetdatetime",3]],[[["berreader",3]],["asn1result",6]],[[["berreader",3]],["asn1result",6]],[[["berreader",3]],["asn1result",6]],[[["berreader",3]],["asn1result",6]],[[["derwriter",3]]],[[["derwriter",3]]],[[["derwriter",3]]],[[["objectidentifier",3]],["bool",15]],[[["utctime",3]],["bool",15]],[[["generalizedtime",3]],["bool",15]],[[["taggeddervalue",3]],["bool",15]],[[["formatter",3]],["result",6]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],[["error",3],["result",4,["error"]]]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["formatter",3]],["result",6]],[[["u64",15],["vec",3,["u64"]]],["objectidentifier",3]],[[]],[[]],[[]],[[]],[[]],[[["offsetdatetime",3]]],[[["offsetdatetime",3]]],[[["offsetdatetime",3]]],[[["offsetdatetime",3]],["option",4]],[[["offsetdatetime",3]],["option",4]],[[["offsetdatetime",3]],["option",4]],[[["u8",15],["vec",3,["u8"]]]],[[]],[[["str",15]],["result",4]],[[["u8",15],["vec",3,["u8"]],["tag",3]]],[[["pcbit",4],["u8",15],["tag",3],["vec",3,["u8"]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[["u64",15],["vec",3,["u64"]]]],[[["objectidentifier",3]],["bool",15]],[[["utctime",3]],["bool",15]],[[["generalizedtime",3]],["bool",15]],[[["taggeddervalue",3]],["bool",15]],[[["u64",15],["vec",3,["u64"]]]],[[],["option",4]],[[],["option",4]],[[["utcoffset",3]],["option",4]],[[["objectidentifier",3]],[["option",4,["ordering"]],["ordering",4]]],[[["utctime",3]],[["option",4,["ordering"]],["ordering",4]]],[[["generalizedtime",3]],[["option",4,["ordering"]],["ordering",4]]],[[["taggeddervalue",3]],[["option",4,["ordering"]],["ordering",4]]],[[],["pcbit",4]],[[]],[[],["tag",3]],[[],[["u8",15],["vec",3,["u8"]]]],[[],[["u8",15],["vec",3,["u8"]]]],[[]],[[]],[[]],[[]],[[]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["string",3]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["result",4]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[],["typeid",3]],[[]],null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null],"p":[[4,"TagClass"],[4,"BERMode"],[4,"PCBit"],[4,"ASN1ErrorKind"],[3,"Tag"],[3,"DERWriter"],[3,"DERWriterSeq"],[3,"DERWriterSet"],[3,"ASN1Error"],[3,"BERReader"],[3,"BERReaderSeq"],[3,"BERReaderSet"],[8,"BERDecodable"],[8,"DEREncodable"],[3,"TaggedDerValue"],[3,"ObjectIdentifier"],[3,"ParseOidError"],[3,"UTCTime"],[3,"GeneralizedTime"]]}\
}');
if (window.initSearch) {window.initSearch(searchIndex)};